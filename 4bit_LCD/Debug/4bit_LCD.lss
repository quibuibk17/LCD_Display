
4bit_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000200  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000200  00000274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000afa  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000705  00000000  00000000  00000e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d4  00000000  00000000  0000154f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00001a24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000350  00000000  00000000  00001ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004ed  00000000  00000000  00001e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002301  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e0       	ldi	r30, 0x00	; 0
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <main>
  7a:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_Command>:
	LCD_Command(0x80); // Di chuyen con tro ve dau dong 1
}

void LCD_Command(unsigned char cmd)
{
	LCD_Data_Port = (LCD_Data_Port & 0x0F) | (cmd & 0xF0);
  82:	92 b3       	in	r25, 0x12	; 18
  84:	9f 70       	andi	r25, 0x0F	; 15
  86:	28 2f       	mov	r18, r24
  88:	20 7f       	andi	r18, 0xF0	; 240
  8a:	92 2b       	or	r25, r18
  8c:	92 bb       	out	0x12, r25	; 18
	LCD_Command_Port &= ~(1 << RS);
  8e:	a8 98       	cbi	0x15, 0	; 21
	LCD_Command_Port |= (1 << EN);
  90:	a9 9a       	sbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	ef e3       	ldi	r30, 0x3F	; 63
  94:	ff e1       	ldi	r31, 0x1F	; 31
  96:	31 97       	sbiw	r30, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <LCD_Command+0x14>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <LCD_Command+0x1a>
  9c:	00 00       	nop
	_delay_ms(2);
	LCD_Command_Port &= ~(1 << EN);
  9e:	a9 98       	cbi	0x15, 1	; 21
  a0:	ef e3       	ldi	r30, 0x3F	; 63
  a2:	ff e1       	ldi	r31, 0x1F	; 31
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <LCD_Command+0x22>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <LCD_Command+0x28>
  aa:	00 00       	nop
	_delay_ms(2);
	
	LCD_Data_Port = (LCD_Data_Port & 0x0F) | (cmd << 4);
  ac:	22 b3       	in	r18, 0x12	; 18
  ae:	2f 70       	andi	r18, 0x0F	; 15
  b0:	f0 e1       	ldi	r31, 0x10	; 16
  b2:	8f 9f       	mul	r24, r31
  b4:	c0 01       	movw	r24, r0
  b6:	11 24       	eor	r1, r1
  b8:	82 2b       	or	r24, r18
  ba:	82 bb       	out	0x12, r24	; 18
	LCD_Command_Port |= (1 << EN);
  bc:	a9 9a       	sbi	0x15, 1	; 21
  be:	8f e3       	ldi	r24, 0x3F	; 63
  c0:	9f e1       	ldi	r25, 0x1F	; 31
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <LCD_Command+0x40>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <LCD_Command+0x46>
  c8:	00 00       	nop
	_delay_ms(2);
	LCD_Command_Port &= ~(1 << EN);
  ca:	a9 98       	cbi	0x15, 1	; 21
  cc:	ef e3       	ldi	r30, 0x3F	; 63
  ce:	ff e1       	ldi	r31, 0x1F	; 31
  d0:	31 97       	sbiw	r30, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <LCD_Command+0x4e>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <LCD_Command+0x54>
  d6:	00 00       	nop
  d8:	08 95       	ret

000000da <LCD_Init>:

#include "LCD.h"

void LCD_Init(void)
{
	LCD_Command_Dir |= (1 << RS) | (1 << EN);
  da:	84 b3       	in	r24, 0x14	; 20
  dc:	83 60       	ori	r24, 0x03	; 3
  de:	84 bb       	out	0x14, r24	; 20
	LCD_Data_Dir |= 0xF0;
  e0:	81 b3       	in	r24, 0x11	; 17
  e2:	80 6f       	ori	r24, 0xF0	; 240
  e4:	81 bb       	out	0x11, r24	; 17
  e6:	8f e3       	ldi	r24, 0x3F	; 63
  e8:	9f e1       	ldi	r25, 0x1F	; 31
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <LCD_Init+0x10>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <LCD_Init+0x16>
  f0:	00 00       	nop
	_delay_ms(2);
	LCD_Command(0x01); //Xoa toan man hinh
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command(0x02); //Di chuyen con tro den dau man hinh
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command(0x28); //Giao tiep 4 bit
  fe:	88 e2       	ldi	r24, 0x28	; 40
 100:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command(0x06); //Di chuyen con tro den vi tri ke tiep moi khi xuat ra LCD 1 ki tu
 104:	86 e0       	ldi	r24, 0x06	; 6
 106:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command(0x0C); //Bat hien thi va tat con tro
 10a:	8c e0       	ldi	r24, 0x0C	; 12
 10c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command(0x80); // Di chuyen con tro ve dau dong 1
 110:	80 e8       	ldi	r24, 0x80	; 128
 112:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 116:	08 95       	ret

00000118 <LCD_Char>:
	_delay_ms(2);
}

void LCD_Char(unsigned char data)
{
	LCD_Data_Port = (LCD_Data_Port & 0x0F) | (data & 0xF0);
 118:	92 b3       	in	r25, 0x12	; 18
 11a:	9f 70       	andi	r25, 0x0F	; 15
 11c:	28 2f       	mov	r18, r24
 11e:	20 7f       	andi	r18, 0xF0	; 240
 120:	92 2b       	or	r25, r18
 122:	92 bb       	out	0x12, r25	; 18
	LCD_Command_Port |= (1 << RS);
 124:	a8 9a       	sbi	0x15, 0	; 21
	LCD_Command_Port |= (1 << EN);
 126:	a9 9a       	sbi	0x15, 1	; 21
 128:	ef e3       	ldi	r30, 0x3F	; 63
 12a:	ff e1       	ldi	r31, 0x1F	; 31
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <LCD_Char+0x14>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LCD_Char+0x1a>
 132:	00 00       	nop
	_delay_ms(2);
	LCD_Command_Port &= ~(1 << EN);
 134:	a9 98       	cbi	0x15, 1	; 21
 136:	ef e3       	ldi	r30, 0x3F	; 63
 138:	ff e1       	ldi	r31, 0x1F	; 31
 13a:	31 97       	sbiw	r30, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCD_Char+0x22>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <LCD_Char+0x28>
 140:	00 00       	nop
	_delay_ms(2);
	
	LCD_Data_Port = (LCD_Data_Port & 0x0F) | (data << 4);
 142:	22 b3       	in	r18, 0x12	; 18
 144:	2f 70       	andi	r18, 0x0F	; 15
 146:	f0 e1       	ldi	r31, 0x10	; 16
 148:	8f 9f       	mul	r24, r31
 14a:	c0 01       	movw	r24, r0
 14c:	11 24       	eor	r1, r1
 14e:	82 2b       	or	r24, r18
 150:	82 bb       	out	0x12, r24	; 18
	LCD_Command_Port |= (1 << EN);
 152:	a9 9a       	sbi	0x15, 1	; 21
 154:	8f e3       	ldi	r24, 0x3F	; 63
 156:	9f e1       	ldi	r25, 0x1F	; 31
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <LCD_Char+0x40>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <LCD_Char+0x46>
 15e:	00 00       	nop
	_delay_ms(2);
	LCD_Command_Port &= ~(1 << EN);
 160:	a9 98       	cbi	0x15, 1	; 21
 162:	ef e3       	ldi	r30, 0x3F	; 63
 164:	ff e1       	ldi	r31, 0x1F	; 31
 166:	31 97       	sbiw	r30, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <LCD_Char+0x4e>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <LCD_Char+0x54>
 16c:	00 00       	nop
 16e:	08 95       	ret

00000170 <LCD_String>:
	_delay_ms(2);
}

void LCD_String(char *str)
{
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	ec 01       	movw	r28, r24
	int i;
	for(i = 0; str[i] != 0; i++)
 176:	88 81       	ld	r24, Y
 178:	88 23       	and	r24, r24
 17a:	61 f0       	breq	.+24     	; 0x194 <LCD_String+0x24>
 17c:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Char(str[i]);
 17e:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_Char>
 182:	8f e3       	ldi	r24, 0x3F	; 63
 184:	9f e1       	ldi	r25, 0x1F	; 31
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <LCD_String+0x16>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <LCD_String+0x1c>
 18c:	00 00       	nop
}

void LCD_String(char *str)
{
	int i;
	for(i = 0; str[i] != 0; i++)
 18e:	89 91       	ld	r24, Y+
 190:	81 11       	cpse	r24, r1
 192:	f5 cf       	rjmp	.-22     	; 0x17e <LCD_String+0xe>
	{
		LCD_Char(str[i]);
		_delay_ms(2);
	}
}
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <LCD_String_xy>:

void LCD_String_xy(char row, char col, char *str)
{
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	ea 01       	movw	r28, r20
	if ((row == 1) && (col < 16))
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	41 f4       	brne	.+16     	; 0x1b4 <LCD_String_xy+0x1a>
 1a4:	60 31       	cpi	r22, 0x10	; 16
 1a6:	78 f4       	brcc	.+30     	; 0x1c6 <LCD_String_xy+0x2c>
	{
		LCD_Command(0x80 | (col & 0x0F));
 1a8:	86 2f       	mov	r24, r22
 1aa:	8f 70       	andi	r24, 0x0F	; 15
 1ac:	80 68       	ori	r24, 0x80	; 128
 1ae:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 1b2:	09 c0       	rjmp	.+18     	; 0x1c6 <LCD_String_xy+0x2c>
	}
	else if ((row == 2) && (col < 16))
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	39 f4       	brne	.+14     	; 0x1c6 <LCD_String_xy+0x2c>
 1b8:	60 31       	cpi	r22, 0x10	; 16
 1ba:	28 f4       	brcc	.+10     	; 0x1c6 <LCD_String_xy+0x2c>
	{
		LCD_Command(0xC0 | (col & 0x0F));
 1bc:	86 2f       	mov	r24, r22
 1be:	8f 70       	andi	r24, 0x0F	; 15
 1c0:	80 6c       	ori	r24, 0xC0	; 192
 1c2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	}
	LCD_String(str);
 1c6:	ce 01       	movw	r24, r28
 1c8:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_String>
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <main>:

#include "LCD.h"

int main(void)
{
    LCD_Init();
 1d2:	0e 94 6d 00 	call	0xda	; 0xda <LCD_Init>
    LCD_String_xy(1, 5, "Hello!");
 1d6:	40 e6       	ldi	r20, 0x60	; 96
 1d8:	50 e0       	ldi	r21, 0x00	; 0
 1da:	65 e0       	ldi	r22, 0x05	; 5
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_String_xy>
 1e2:	8f e3       	ldi	r24, 0x3F	; 63
 1e4:	9c e9       	ldi	r25, 0x9C	; 156
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <main+0x14>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <main+0x1a>
 1ec:	00 00       	nop
    _delay_ms(10);
    LCD_String_xy(2, 5, "Goodbye!");
 1ee:	47 e6       	ldi	r20, 0x67	; 103
 1f0:	50 e0       	ldi	r21, 0x00	; 0
 1f2:	65 e0       	ldi	r22, 0x05	; 5
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_String_xy>
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <main+0x28>

000001fc <_exit>:
 1fc:	f8 94       	cli

000001fe <__stop_program>:
 1fe:	ff cf       	rjmp	.-2      	; 0x1fe <__stop_program>
